/*****************************************************************************

        Signal.otd
        Copyright (c) 2015 Ohm Force

*****************************************************************************/



\class {Signal}
\header {flip/Signal.h}
\declaration ***
template <class... Args>   class Signal;
***

\code {flip::Signal} is a type that allows signalling of flip objects
in a type safe way.

Signals are only local and targetted at an object. They are not broadcasted
to the other clients in a collaboration case, and they are not part of
an observer. It is therefore not part of the document model.

However, if multiple documents are using a \code {Hub} on a local machine
in different threads or processes, the signal will be delivered on
the local machine.

\code {Signal}s can also be a way to communicate directly with the
server.

When messages should be part of a document model and broadcasted then
\link [id=Message] {\code {Message}} shall be used instead.



/*\\\ PARAMETERS \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*/

\parameter {Args...} {A variable number of arguments that compose the parameters
of the signal}



/*\\\ METHODS \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*/

\constructor {}
\brief {Constructs the \code {Signal}}

\codeblock [language=c++] ***
Signal (uint32_t type, Object & object);
***

Constructor. Constructs the object by linking it to \code {object}.
\code {type} is a unique number for the class of the object
that represents the signal type.

Example :

\codeblock [language=c++] ***
class Form : public Object
{
public:
   enum
   {
      Signal_OPEN_VIEW = 0,
      Signal_CLOSE_VIEW,
   };

   Form ()
   : signal_open_view (Signal_OPEN_VIEW, *this)
   , signal_close_view (Signal_CLOSE_VIEW, *this)

   Signal <int /* width */, int /* height */> signal_open_view;
   Signal <> signal_close_view;

};
***

//----------------------------------------------------------------------------

\destructor {}
\brief {Destructs the \code {Signal}}

\codeblock [language=c++] ***
~Signal ();
***

Destructor.

//----------------------------------------------------------------------------

\method {operator ()}
\brief {Fire signal}

\codeblock [language=c++] ***
void  operator () (Args... args);
***

Notify all connection listeners for this \code {type} of signal and this
object as identified by its unique flip reference number.

All documents in the local document tree are also notified, and if the
transport is configured to let those signal pass through, the server
will be notified too.

\codeblock [language=c++] ***
form.signal_open_view (1280, 1024);
form.signal_close_view ();
***

//----------------------------------------------------------------------------

\method {connect}
\brief {Connect a listener}

\codeblock [language=c++] ***
template <class T, class F>   SignalConnection  connect (T & t, F f);   (1)
template <class F>   SignalConnection  connect (F f);                   (2)
***

\enumerate {
\item {function member delegate version}
\item {lambda version}
}

Connect a listener to this \code {Signal}. Returns a \code {SignalConnection}.
This last type should be stored in a way to ensure that the listener could be signalled
as long as the \code {SignalConnection} is alive.

\codeblock [language=c++] ***
SignalConnection cnx = form.signal_open_view.connect ([](int width, int height){
   // open view witdh x height
});

SignalConnection cnx2 = form.signal_close_view.connect ([](){
   // close view
});
***

Note that \code {cnx} and \code {cnx2} in the above example needs to be
stored. If they go below the function scope, they will be destroyed and
therefore the signal connection will be broken.

\code {SignalConnections} cannot be copied, but can be moved with
\code {std::move}.




