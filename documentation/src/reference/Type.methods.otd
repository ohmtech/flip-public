/*****************************************************************************

        Type.methods.otd
        Copyright (c) 2015 Ohm Force

*****************************************************************************/



/*\\\ DIVISION \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*/

\division {Document Management}

\method {document}
\brief {Returns the document to which the object is attached to}

\codeblock [language=c++] ***
DocumentBase & document () const;
***

Returns the document to which the object is attached to.

\warning {Temporary flip objects are not attached to a document}

//----------------------------------------------------------------------------

\method {ref}
\brief {Returns the unique reference number of the object}

\codeblock [language=c++] ***
const Ref & ref () const;
***

Returns the unique reference number of the object.

//----------------------------------------------------------------------------

\method {added}
\brief {Returns \code {true} \emph {iff} the object was just attached to the document tree}

\codeblock [language=c++] ***
bool  added () const;
***

Returns \code {true} \emph {iff} the object was just attached to the document tree.

Example :

\codeblock [language=c++] ***
void  Observer::document_changed (Note & note)
{
   if (note.added ())
   {
      // A note was added to the document. Create the corresponding
      // view element

      note.entity ().emplace <NoteView> ();
   }

   [...]
}
***



//----------------------------------------------------------------------------

\method {removed}
\brief {Returns \code {true} \emph {iff} the object was just detached from the document tree}

\codeblock [language=c++] ***
bool  removed () const;
***

Returns \code {true} \emph {iff} the object was just detached from the document tree.

Example :

\codeblock [language=c++] ***
void  Observer::document_changed (Note & note)
{
   [...]

   if (note.removed ())
   {
      // A note was removed from the document. Release the corresponding
      // view element

      note.entity ().erase <NoteView> ();
   }
}
***

//----------------------------------------------------------------------------

\method {resident}
\brief {Returns \code {true} \emph {iff} the object was neither attached nor detached from the document tree}

\codeblock [language=c++] ***
bool  resident () const;
***

Returns \code {true} \emph {iff} the object was neither attached nor detached from the document tree.

An object can be \code {resident} but moved. In this case the \code {iterator}
pointing to it will allow to detect the move.

Example :

\codeblock [language=c++] ***
void  Observer::document_changed (Array <Track> & tracks)
{
   auto it = tracks.begin ();
   auto it_end = tracks.end ();

   for (; it != it_end ; ++it)
   {
      Track & track = *it;

      if (it.added () && track.resident ())
      {
         // the track was moved in the container
         // this is the destination position
      }

      if (it.added () && track.resident ())
      {
         // the track was moved in the container
         // this is the source position
      }
   }
}
***


//----------------------------------------------------------------------------

\method {changed}
\brief {Returns \code {true} \emph {iff} the object or one of its children was modified}

\codeblock [language=c++] ***
bool  changed () const;
***

Returns \code {true} \emph {iff} the object or one of its children was modified.

Example :

\codeblock [language=c++] ***
void  Observer::document_changed (Note & note)
{
   auto & view = note.entity ().use <ViewNote> ();

   if (note.changed ())
   {
      // one or more properties of the note changed

      if (note.position.changed ())
      {
         view.set_position (note.position);
      }

      if (note.duration.changed ())
      {
         view.set_duration (note.duration);
      }
   }
}
***


//----------------------------------------------------------------------------

\method {ancestor}
\brief {Returns a reference to a parent in the current parent chain of the object}

\codeblock [language=c++] ***
template <class T>   T &   ancestor ();
template <class T>   const T &   ancestor () const;
***

Returns a reference to a parent in the current parent chain of the object.

\note {If an object or its parent is moved from one container to another, this function
will always return the current parent, that is not the previous one}

//----------------------------------------------------------------------------

\method {disable_in_undo}
\brief {Disables the record state modification in history}

\codeblock [language=c++] ***
void   disable_in_undo ();
***

Disables the record state modification in history of the object and its
subtree if any.

Example :

\codeblock [language=c++] ***
void  add_user (Root & root)
{
   // emplace a new User of the document to store
   // user specific data. User is constructed with
   // the unique user id number given at document
   // creation

   User & user = root.users.emplace <User> (root.document ().user ());

   // we don't want the scroll position in the document
   // to be part of undo
   user.scroll_position.disable_in_undo ();
}
***


//----------------------------------------------------------------------------

\method {inherit_in_undo}
\brief {Inherits the record state modification in history}

\codeblock [language=c++] ***
void   inherit_in_undo ();
***

Inherits the record state modification in history of the object and its
subtree if any, from its parent state. This is the default mode.

\note {If the Root object of the tree is in inherited mode, then it
is considered as enabled in undo.}

//----------------------------------------------------------------------------

\method {is_in_undo_enabled}
\brief {Returns \code {true} \emph {iff} this object modifications are recorded in history}

\codeblock [language=c++] ***
bool  is_in_undo_enabled () const;
***

Returns \code {true} \emph {iff} this object modifications are recorded in history.
The function recursively search for disabled state starting from the object itself
and navigating through the parent objects, if the state is inherited.

//----------------------------------------------------------------------------

\method {revert}
\brief {Reverts all the changes make to the object and its children if any}

\codeblock [language=c++] ***
void  revert () const;
***

Reverts all the changes make to the object and its children if any.

Example :

\codeblock [language=c++] ***
// initially, note.position == 1

note.position = 2;
note.revert ();

// now, note.position == 1
***



